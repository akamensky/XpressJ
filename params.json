{"name":"XpressJ","tagline":"Lightweight Sinatra/Express.js inspired framework for web applications in Java","body":"# ![XpressJ](https://raw.githubusercontent.com/akamensky/XpressJ/master/graphics/xpressj-25x25.png) XpressJ - Lightweight Web framework\r\n\r\n[![Build Status](https://travis-ci.org/akamensky/XpressJ.svg?branch=master)](https://travis-ci.org/akamensky/XpressJ)\r\n\r\n![XpressJ](https://raw.githubusercontent.com/akamensky/XpressJ/master/graphics/xpressj-75x75.png)\r\n\r\n#### Table of contents\r\n- [Introduction](#introduction)\r\n- [Examples](#examples)\r\n- [Development plans](#development-plans)\r\n- [Links](#links)\r\n\r\n---\r\n#### Introduction\r\n[__XpressJ__](https://github.com/akamensky/XpressJ) is a lightweight framework for building standalone (for now) Java web applications. It is inspired by JavaScript framework [__Express.js__](https://github.com/visionmedia/express) which was initially based on Sinatra. There is already great framework the goal of which is to 100% reproduce Sinatra functionality for Java web applications. You may want to look at it - [__Spark__](https://github.com/perwendel/spark). However while trying to use it I found some limitations or rather disadvantages (IMO) comparing to Express.js. Therefore XpressJ is my attempt to bring same logic into Java allowing fast development and great extendability. _This project is still under heavy development and is not recommended (yet) for production use. First production-ready release will be of version 1.0.0 and there is a long way to go before that._ __Versions of 0.x.y are released to Maven Central, but are not to be used in production yet.__\r\n\r\n---\r\n#### Examples\r\nSimple HelloWorld application:\r\n```java\r\nimport xpressj.*;\r\n\r\npublic class HelloWorld {\r\n    public static void main (String[] args){\r\n        XpressJ app = new XpressJ(new Configuration());\r\n\r\n        app.start();\r\n\r\n        app.get(\"/\", (request, response) -> {\r\n            response.send(\"Hello World!\");\r\n        });\r\n    }\r\n}\r\n```\r\nUse of wildcards:\r\n```java\r\napp.get(\"*\", new Route() {\r\n    @Override\r\n    public void handle(Request request, Response response) {\r\n        //Will match every GET request\r\n    }\r\n});\r\n\r\napp.get(\"/hello/*\", new Route() {\r\n    @Override\r\n    public void handle(Request request, Response response) {\r\n        //Will match every GET request under path /hello/...\r\n    }\r\n});\r\n\r\napp.get(\"/hello/*/\", new Route() {\r\n    @Override\r\n    public void handle(Request request, Response response) {\r\n        //Will match /hello/world/ and /hello/people/ etc\r\n    }\r\n});\r\n\r\napp.get(\"/hello/*/world\", new Route() {\r\n    @Override\r\n    public void handle(Request request, Response response) {\r\n        //Will match /hello/new/world and /hello/old/world etc\r\n    }\r\n});\r\n```\r\nUse of parameters:\r\n```java\r\napp.get(\"/hello/:param\", new Route() {\r\n    @Override\r\n    public void handle(Request request, Response response) {\r\n        //Will match only for URI with two parts and respond with second part\r\n        response.send(request.getParam(\"param\"));\r\n    }\r\n});\r\n\r\napp.get(\"/topics/topic-:param\", new Route() {\r\n    @Override\r\n    public void handle(Request request, Response response) {\r\n        //Will match only for URI with two parts and respond with substitution for :param\r\n        response.send(request.getParam(\"param\"));\r\n    }\r\n});\r\n```\r\nFor more, please use documentation (WiP)\r\n\r\n---\r\n#### Development plans\r\n- [Development plans](https://trello.com/b/07AvGeym/xpressj)\r\n\r\n---\r\n#### Links\r\n- [Development plans](https://trello.com/b/07AvGeym/xpressj)\r\n- [Website (WiP)](http://xpressj.com/)\r\n- [Javadoc (WiP)](http://xpressj.com/javadoc)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}